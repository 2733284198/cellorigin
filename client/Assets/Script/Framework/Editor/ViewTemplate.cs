using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Framework
{
    class ViewTemplate
    {
        CodeGenerator _gen;
        string _name;
        public ViewTemplate( CodeGenerator gen, string name )
        {
            _gen = gen;
            _name = name;
        }

        public string ViewClassName
        {
            get { return _name + "View";  }
        }

        public string PresenterClassName
        {
            get { return _name + "Presenter"; }
        }

        public string WidgetVarName
        {
            get { return "_" + _name; }
        }

        public void Class( )
        {
            _gen.PrintLine("// Generated by github.com/davyxu/cellorigin");
            _gen.PrintLine("using UnityEngine;");
            _gen.PrintLine("using UnityEngine.UI;");
            _gen.PrintLine();

            _gen.PrintLine("partial class ", ViewClassName, " : Framework.BaseView");
            _gen.PrintLine("{");
            _gen.In();

            _gen.PrintLine(PresenterClassName, " _Presenter;");

            _gen.PrintLine("public override void Bind( Framework.BasePresenter presenter )");
            _gen.PrintLine("{");
            _gen.In();

            _gen.PrintLine("_Presenter = presenter as ", PresenterClassName, ";");
            _gen.PrintLine();
            _gen.PrintLine("var trans = this.transform;");
            // TODO 打印控件搜索代码

            // TODO 打印控件绑定代码


            _gen.Out(); =>
            _gen.PrintLine("}"); // Bind
            _gen.PrintLine();

            _gen.Out();
            _gen.PrintLine("}"); // Class
        }

        

        public void FindWidgetlAssignToVar( string name, WidgetType widgetType )
        {
            _gen.PrintLine(WidgetVarName, " = trans.Find(\"", name, "\").GetComponent<", widgetType.ToString(), ">();");
        }

        public void BindWidgetToPresenter( string name, DataSyncType syncType )
        {
            if ( syncType == DataSyncType.ViewToPresenter || syncType == DataSyncType.TwoWay )
            {
                _gen.PrintLine(WidgetVarName, ".onValueChanged.AddListener( x =>");
                _gen.PrintLine("{");
                _gen.In();

                _gen.PrintLine("_Presenter.", name);

                _gen.Out();
                _gen.PrintLine("}");
            }
            
        }
    }
}
