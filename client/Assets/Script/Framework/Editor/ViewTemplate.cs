using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Framework
{
    class ViewTemplate
    {
        public static string ClassName( DataContext ctx )
        {
            return ctx.Name + "View";
        }
       
        public static string WidgetVariable(DataContext ctx)
        {
            return "_" + ctx.Name;
        }

        public static string WidgetTypeName(DataContext ctx )
        {           
            switch( ctx.Type )
            {
                case WidgetType.ScrollRect:
                    return "Framework.ListControl";
                default:
                    return ctx.Type.ToString();
            }
        }

        public static string WidgetData(DataContext ctx)
        {
            switch (ctx.Type)
            {
                case WidgetType.Text:
                    {
                        return WidgetVariable(ctx) + ".txt";
                    }
            }

            // TODO 处理错误

            return "Unknown";
        }

        public static void Class( CodeGenerator gen, DataContext viewContext, List<DataContext> widgetContextList )
        {            
            gen.PrintLine("// Generated by github.com/davyxu/cellorigin");
            gen.PrintLine("using UnityEngine;");
            gen.PrintLine("using UnityEngine.UI;");
            gen.PrintLine();

            gen.PrintLine("partial class ", ClassName(viewContext), " : Framework.BaseView");
            gen.PrintLine("{");
            gen.In();

            gen.PrintLine(PresenterTemplate.ClassName(viewContext), " _Presenter;");
            gen.PrintLine();
            // TODO 变量声明代码

            foreach( DataContext widgetContext in widgetContextList)
            {
                WidgetDeclare(gen, widgetContext);
            }


            gen.PrintLine("public override void Bind( Framework.BasePresenter presenter )");
            gen.PrintLine("{");
            gen.In();

            gen.PrintLine("_Presenter = presenter as ", PresenterTemplate.ClassName(viewContext), ";");
            gen.PrintLine();

            gen.PrintLine("var trans = this.transform;");
            gen.PrintLine();
            
            // 打印控件搜索代码
            foreach (DataContext widgetContext in widgetContextList)
            {
                FindWidgetlAssignToVar(gen, widgetContext);
            }

            gen.PrintLine();

            // 打印控件绑定代码
            foreach (DataContext widgetContext in widgetContextList)
            {
                WidgetBind(gen, widgetContext);
            }


            gen.Out();
            gen.PrintLine("}"); // Bind
            gen.PrintLine();

            gen.Out();
            gen.PrintLine("}"); // Class
        }



        public static void FindWidgetlAssignToVar(CodeGenerator gen, DataContext widgetContext)
        {
            gen.PrintLine(WidgetVariable(widgetContext), " = trans.Find(\"", widgetContext.Name, "\").GetComponent<", widgetContext.Type.ToString(), ">();");
        }

        // 一个View变量的声明代码
        public static void WidgetDeclare(CodeGenerator gen, DataContext widgetContext)
        {
            gen.PrintLine(WidgetTypeName(widgetContext), " ", WidgetVariable(widgetContext), ";");
        }

        // 一个View变量的绑定代码
        public static void WidgetBind(CodeGenerator gen, DataContext widgetContext)
        {
            switch (widgetContext.Type)
            {
                case WidgetType.ScrollRect:
                    {
                        gen.PrintLine("Framework.Utility.BindCollectionView<int, ",
                                    PresenterTemplate.ClassName(widgetContext), ", ",
                                    ClassName(widgetContext), ">( _Presenter.", PresenterTemplate.Property(widgetContext),
                                    ", ", WidgetVariable(widgetContext)
                                );
                    }
                    break;
                case WidgetType.Button:
                    {
                        gen.PrintLine(WidgetVariable(widgetContext), ".onClick.AddListener( _Presenter.", PresenterTemplate.Command( widgetContext ), ");" );
                    }
                    break;
                case WidgetType.InputField:
                case WidgetType.Text:
                    {
                        if (widgetContext.SyncType == DataSyncType.ViewToPresenter || widgetContext.SyncType == DataSyncType.TwoWay)
                        {
                            gen.PrintLine(WidgetVariable(widgetContext), ".onValueChanged.AddListener( x =>");
                            gen.PrintLine("{");
                            gen.In();

                            gen.PrintLine("_Presenter.", PresenterTemplate.Property(widgetContext), " = x;");

                            gen.Out();
                            gen.PrintLine("});");

                            gen.PrintLine("_Presenter.", PresenterTemplate.Property(widgetContext), " = ", WidgetData(widgetContext), ";");
                        }

                        if (widgetContext.SyncType == DataSyncType.PresenterToView || widgetContext.SyncType == DataSyncType.TwoWay)
                        {
                            gen.PrintLine("_Presenter.", PresenterTemplate.Event(widgetContext), " += delegate()");
                            gen.PrintLine("{");
                            gen.In();

                            switch (widgetContext.Type)
                            {
                                case WidgetType.Text:
                                    {
                                        gen.PrintLine(WidgetVariable(widgetContext), ".txt = _Presenter.", PresenterTemplate.Property(widgetContext));
                                    }
                                    break;
                            }

                            gen.Out();
                            gen.PrintLine("});");
                        }
                    }
                    break;
            }

 



            
        }

       
    }
}
